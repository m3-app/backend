// Code generated by ent, DO NOT EDIT.

package owner

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/m3-app/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Owner {
	return predicate.Owner(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldFirstName, v))
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldMiddleName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldLastName, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldFullName, v))
}

// IDURL applies equality check predicate on the "id_url" field. It's identical to IDURLEQ.
func IDURL(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldIDURL, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldVerified, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContainsFold(FieldFirstName, v))
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldMiddleName, v))
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldMiddleName, v))
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldIn(FieldMiddleName, vs...))
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldNotIn(FieldMiddleName, vs...))
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGT(FieldMiddleName, v))
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGTE(FieldMiddleName, v))
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLT(FieldMiddleName, v))
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLTE(FieldMiddleName, v))
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContains(FieldMiddleName, v))
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasPrefix(FieldMiddleName, v))
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasSuffix(FieldMiddleName, v))
}

// MiddleNameIsNil applies the IsNil predicate on the "middle_name" field.
func MiddleNameIsNil() predicate.Owner {
	return predicate.Owner(sql.FieldIsNull(FieldMiddleName))
}

// MiddleNameNotNil applies the NotNil predicate on the "middle_name" field.
func MiddleNameNotNil() predicate.Owner {
	return predicate.Owner(sql.FieldNotNull(FieldMiddleName))
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEqualFold(FieldMiddleName, v))
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContainsFold(FieldMiddleName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContainsFold(FieldLastName, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContainsFold(FieldFullName, v))
}

// IDURLEQ applies the EQ predicate on the "id_url" field.
func IDURLEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldIDURL, v))
}

// IDURLNEQ applies the NEQ predicate on the "id_url" field.
func IDURLNEQ(v string) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldIDURL, v))
}

// IDURLIn applies the In predicate on the "id_url" field.
func IDURLIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldIn(FieldIDURL, vs...))
}

// IDURLNotIn applies the NotIn predicate on the "id_url" field.
func IDURLNotIn(vs ...string) predicate.Owner {
	return predicate.Owner(sql.FieldNotIn(FieldIDURL, vs...))
}

// IDURLGT applies the GT predicate on the "id_url" field.
func IDURLGT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGT(FieldIDURL, v))
}

// IDURLGTE applies the GTE predicate on the "id_url" field.
func IDURLGTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldGTE(FieldIDURL, v))
}

// IDURLLT applies the LT predicate on the "id_url" field.
func IDURLLT(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLT(FieldIDURL, v))
}

// IDURLLTE applies the LTE predicate on the "id_url" field.
func IDURLLTE(v string) predicate.Owner {
	return predicate.Owner(sql.FieldLTE(FieldIDURL, v))
}

// IDURLContains applies the Contains predicate on the "id_url" field.
func IDURLContains(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContains(FieldIDURL, v))
}

// IDURLHasPrefix applies the HasPrefix predicate on the "id_url" field.
func IDURLHasPrefix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasPrefix(FieldIDURL, v))
}

// IDURLHasSuffix applies the HasSuffix predicate on the "id_url" field.
func IDURLHasSuffix(v string) predicate.Owner {
	return predicate.Owner(sql.FieldHasSuffix(FieldIDURL, v))
}

// IDURLEqualFold applies the EqualFold predicate on the "id_url" field.
func IDURLEqualFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldEqualFold(FieldIDURL, v))
}

// IDURLContainsFold applies the ContainsFold predicate on the "id_url" field.
func IDURLContainsFold(v string) predicate.Owner {
	return predicate.Owner(sql.FieldContainsFold(FieldIDURL, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.Owner {
	return predicate.Owner(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.Owner {
	return predicate.Owner(sql.FieldNEQ(FieldVerified, v))
}

// HasLocations applies the HasEdge predicate on the "locations" edge.
func HasLocations() predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationsWith applies the HasEdge predicate on the "locations" edge with a given conditions (other predicates).
func HasLocationsWith(preds ...predicate.Location) predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LocationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Owner) predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Owner) predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Owner) predicate.Owner {
	return predicate.Owner(func(s *sql.Selector) {
		p(s.Not())
	})
}
