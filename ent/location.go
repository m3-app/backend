// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/m3-app/backend/ent/location"
	"github.com/m3-app/backend/ent/owner"
)

// Location is the model entity for the Location schema.
type Location struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocationQuery when eager-loading is set.
	Edges           LocationEdges `json:"edges"`
	owner_locations *uuid.UUID
}

// LocationEdges holds the relations/edges for other nodes in the graph.
type LocationEdges struct {
	// Address holds the value of the address edge.
	Address []*Address `json:"address,omitempty"`
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *Owner `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedAddress map[string][]*Address
	namedReviews map[string][]*Review
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading.
func (e LocationEdges) AddressOrErr() ([]*Address, error) {
	if e.loadedTypes[0] {
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e LocationEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[1] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocationEdges) OwnerOrErr() (*Owner, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: owner.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Location) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case location.FieldName, location.FieldType:
			values[i] = new(sql.NullString)
		case location.FieldID:
			values[i] = new(uuid.UUID)
		case location.ForeignKeys[0]: // owner_locations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Location", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Location fields.
func (l *Location) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case location.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case location.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case location.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = value.String
			}
		case location.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field owner_locations", values[i])
			} else if value.Valid {
				l.owner_locations = new(uuid.UUID)
				*l.owner_locations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryAddress queries the "address" edge of the Location entity.
func (l *Location) QueryAddress() *AddressQuery {
	return NewLocationClient(l.config).QueryAddress(l)
}

// QueryReviews queries the "reviews" edge of the Location entity.
func (l *Location) QueryReviews() *ReviewQuery {
	return NewLocationClient(l.config).QueryReviews(l)
}

// QueryOwner queries the "owner" edge of the Location entity.
func (l *Location) QueryOwner() *OwnerQuery {
	return NewLocationClient(l.config).QueryOwner(l)
}

// Update returns a builder for updating this Location.
// Note that you need to call Location.Unwrap() before calling this method if this Location
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Location) Update() *LocationUpdateOne {
	return NewLocationClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Location entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Location) Unwrap() *Location {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Location is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Location) String() string {
	var builder strings.Builder
	builder.WriteString("Location(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("name=")
	builder.WriteString(l.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(l.Type)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAddress returns the Address named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Location) NamedAddress(name string) ([]*Address, error) {
	if l.Edges.namedAddress == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedAddress[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Location) appendNamedAddress(name string, edges ...*Address) {
	if l.Edges.namedAddress == nil {
		l.Edges.namedAddress = make(map[string][]*Address)
	}
	if len(edges) == 0 {
		l.Edges.namedAddress[name] = []*Address{}
	} else {
		l.Edges.namedAddress[name] = append(l.Edges.namedAddress[name], edges...)
	}
}

// NamedReviews returns the Reviews named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Location) NamedReviews(name string) ([]*Review, error) {
	if l.Edges.namedReviews == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedReviews[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Location) appendNamedReviews(name string, edges ...*Review) {
	if l.Edges.namedReviews == nil {
		l.Edges.namedReviews = make(map[string][]*Review)
	}
	if len(edges) == 0 {
		l.Edges.namedReviews[name] = []*Review{}
	} else {
		l.Edges.namedReviews[name] = append(l.Edges.namedReviews[name], edges...)
	}
}

// Locations is a parsable slice of Location.
type Locations []*Location
