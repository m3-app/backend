// Code generated by ent, DO NOT EDIT.

package location

const (
	// Label holds the string label denoting the location type in the database.
	Label = "location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLocationID holds the string denoting the location_id field in the database.
	FieldLocationID = "location_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the location in the database.
	Table = "locations"
	// AddressTable is the table that holds the address relation/edge.
	AddressTable = "addresses"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "addresses"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "location_address"
	// ReviewsTable is the table that holds the reviews relation/edge. The primary key declared below.
	ReviewsTable = "review_location"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "locations"
	// OwnerInverseTable is the table name for the Owner entity.
	// It exists in this package in order to avoid circular dependency with the "owner" package.
	OwnerInverseTable = "owners"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_locations"
)

// Columns holds all SQL columns for location fields.
var Columns = []string{
	FieldID,
	FieldLocationID,
	FieldName,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "locations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"owner_locations",
}

var (
	// ReviewsPrimaryKey and ReviewsColumn2 are the table columns denoting the
	// primary key for the reviews relation (M2M).
	ReviewsPrimaryKey = []string{"review_id", "location_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
