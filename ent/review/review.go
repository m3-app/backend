// Code generated by ent, DO NOT EDIT.

package review

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// LocationTable is the table that holds the location relation/edge. The primary key declared below.
	LocationTable = "review_location"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "locations"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldRating,
	FieldMessage,
}

var (
	// LocationPrimaryKey and LocationColumn2 are the table columns denoting the
	// primary key for the location relation (M2M).
	LocationPrimaryKey = []string{"review_id", "location_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
