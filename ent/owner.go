// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/m3-app/backend/ent/owner"
)

// Owner is the model entity for the Owner schema.
type Owner struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// IDURL holds the value of the "id_url" field.
	IDURL string `json:"id_url,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OwnerQuery when eager-loading is set.
	Edges OwnerEdges `json:"edges"`
}

// OwnerEdges holds the relations/edges for other nodes in the graph.
type OwnerEdges struct {
	// Locations holds the value of the locations edge.
	Locations []*Location `json:"locations,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedLocations map[string][]*Location
	namedUser      map[string][]*User
}

// LocationsOrErr returns the Locations value or an error if the edge
// was not loaded in eager-loading.
func (e OwnerEdges) LocationsOrErr() ([]*Location, error) {
	if e.loadedTypes[0] {
		return e.Locations, nil
	}
	return nil, &NotLoadedError{edge: "locations"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e OwnerEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Owner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case owner.FieldVerified:
			values[i] = new(sql.NullBool)
		case owner.FieldFirstName, owner.FieldMiddleName, owner.FieldLastName, owner.FieldFullName, owner.FieldIDURL:
			values[i] = new(sql.NullString)
		case owner.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Owner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Owner fields.
func (o *Owner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case owner.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case owner.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				o.FirstName = value.String
			}
		case owner.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				o.MiddleName = value.String
			}
		case owner.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				o.LastName = value.String
			}
		case owner.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				o.FullName = value.String
			}
		case owner.FieldIDURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_url", values[i])
			} else if value.Valid {
				o.IDURL = value.String
			}
		case owner.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				o.Verified = value.Bool
			}
		}
	}
	return nil
}

// QueryLocations queries the "locations" edge of the Owner entity.
func (o *Owner) QueryLocations() *LocationQuery {
	return NewOwnerClient(o.config).QueryLocations(o)
}

// QueryUser queries the "user" edge of the Owner entity.
func (o *Owner) QueryUser() *UserQuery {
	return NewOwnerClient(o.config).QueryUser(o)
}

// Update returns a builder for updating this Owner.
// Note that you need to call Owner.Unwrap() before calling this method if this Owner
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Owner) Update() *OwnerUpdateOne {
	return NewOwnerClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Owner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Owner) Unwrap() *Owner {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Owner is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Owner) String() string {
	var builder strings.Builder
	builder.WriteString("Owner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("first_name=")
	builder.WriteString(o.FirstName)
	builder.WriteString(", ")
	builder.WriteString("middle_name=")
	builder.WriteString(o.MiddleName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(o.LastName)
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(o.FullName)
	builder.WriteString(", ")
	builder.WriteString("id_url=")
	builder.WriteString(o.IDURL)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", o.Verified))
	builder.WriteByte(')')
	return builder.String()
}

// NamedLocations returns the Locations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Owner) NamedLocations(name string) ([]*Location, error) {
	if o.Edges.namedLocations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedLocations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Owner) appendNamedLocations(name string, edges ...*Location) {
	if o.Edges.namedLocations == nil {
		o.Edges.namedLocations = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		o.Edges.namedLocations[name] = []*Location{}
	} else {
		o.Edges.namedLocations[name] = append(o.Edges.namedLocations[name], edges...)
	}
}

// NamedUser returns the User named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Owner) NamedUser(name string) ([]*User, error) {
	if o.Edges.namedUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Owner) appendNamedUser(name string, edges ...*User) {
	if o.Edges.namedUser == nil {
		o.Edges.namedUser = make(map[string][]*User)
	}
	if len(edges) == 0 {
		o.Edges.namedUser[name] = []*User{}
	} else {
		o.Edges.namedUser[name] = append(o.Edges.namedUser[name], edges...)
	}
}

// Owners is a parsable slice of Owner.
type Owners []*Owner
