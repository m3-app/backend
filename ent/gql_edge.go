// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Address) Location(ctx context.Context) (*Location, error) {
	result, err := a.Edges.LocationOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *Location) Address(ctx context.Context) (result []*Address, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.AddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryAddress().All(ctx)
	}
	return result, err
}

func (l *Location) Reviews(ctx context.Context) (result []*Review, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedReviews(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.ReviewsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryReviews().All(ctx)
	}
	return result, err
}

func (l *Location) Owner(ctx context.Context) (*Owner, error) {
	result, err := l.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Owner) Locations(ctx context.Context) (result []*Location, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedLocations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.LocationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryLocations().All(ctx)
	}
	return result, err
}

func (o *Owner) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryUser().All(ctx)
	}
	return result, err
}

func (r *Review) Location(ctx context.Context) (result []*Location, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedLocation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.LocationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryLocation().All(ctx)
	}
	return result, err
}

func (u *User) Owner(ctx context.Context) (*Owner, error) {
	result, err := u.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}
